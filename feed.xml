<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-08-09T00:04:00+09:30</updated><id>/feed.xml</id><title type="html">Gowri Sankar</title><subtitle>Computer Science student at the University of South Australia, Adelaide.</subtitle><entry><title type="html">Visualizing my WhatsApp messages</title><link href="/code/2019/08/08/rusted.html" rel="alternate" type="text/html" title="Visualizing my WhatsApp messages" /><published>2019-08-08T20:32:00+09:30</published><updated>2019-08-08T20:32:00+09:30</updated><id>/code/2019/08/08/rusted</id><content type="html" xml:base="/code/2019/08/08/rusted.html">&lt;p&gt;I was learning Rust and its idea of being a systems programming language. Rust is a language that is focused on speed, efficiency and memory safety and comes without a garbage collector but ensures memory safety by providing checks and compile time guarantees.&lt;/p&gt;

&lt;p&gt;I was looking for small projects to help me get my hands dirty on Rust and I recently stumbled upon the settings page on WhatsApp where it shows you the number and bytes of messages sent and received. Given that there were only two contacts that I use WhatsApp for and the numbers being around 30,000 and 40,000 (sent, received), I was curious to know, who sent me the most messages and who got the most messages from me.&lt;/p&gt;

&lt;h3 id=&quot;the-backend&quot;&gt;The Backend&lt;/h3&gt;
&lt;p&gt;Now WhatsApp is just WhatsApp. It is an instant messaging application which means there is no API to get data from. So, getting the chats from WhatsApp is a huge heavy manual work. Luckily since I only have two very lengthy conversations, and this is just a small personal project, it was rather fine. If one were to make this as a service, the chances of people trusting a service with their actual chat transcript is lesser than Valve learning to finally count to 3.&lt;/p&gt;

&lt;p&gt;So, I emailed myself the chats of the two conversations, and unzipped the transcripts to my source code.&lt;/p&gt;

&lt;p&gt;The Rust part of this project only the backend, It just parses the text and returns a json file. For the frontend, I used D3.js on the browser to visualize the data from the json. I initially  had the idea of using Rust as a web server for the backend and processing the text file in the server, but again, you would not want to voluntarily upload your chat transcript over the internet. There is a way of running Rust code on the client; using WebAssembly, but I honestly did not have this idea until I wrote this sentence. Maybe I could do it in future.&lt;/p&gt;

&lt;p&gt;Both text files are fairly big by text transcripts standards with about 12,000 lines and 48,000 lines and were about 1MB and 3MB in size. Just for the sake of it, I created another file and appended the content of one of the files several times. This new file had 1,755,348 lines and was about 101 MB in size.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/rust_whatsapp.png&quot; alt=&quot;Rust WhatsApp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The approach was to use a buffered reader and parse the strings into a custom data structure that could handle some parsing functions and input validation. The program could be made inefficient if the entire file was read into a string and then performing string functions such as split or find for instance.&lt;/p&gt;

&lt;p&gt;And the performance of Rust is certainly indistinguishable from C/C++, the bottleneck maybe in the I/0. The small text files were handled with breeze. The program parsed around 2 million lines in 3.74 seconds with a peak memory usage of 500 kilobytes. It is also super accurate, it knows to skip messages which expand into several lines and contains input validation, so the numbers we get out of this should be very accurate.  With the big task completed, now it was time to create the front end.&lt;/p&gt;

&lt;h3 id=&quot;the-frontend&quot;&gt;The Frontend&lt;/h3&gt;

&lt;p&gt;I passed the json to a Rails server running on my computer, and that acts as an interface between the back end and the front end.&lt;/p&gt;

&lt;p&gt;For data visualization purposes, I used D3.js for producing dynamic, interactive data visualizations in web browsers. There are really creative and unique ways to represent this data. One example would be the GitHub commits per day style &lt;a href=&quot;https://www.d3-graph-gallery.com/heatmap.html&quot;&gt;heatmap chart&lt;/a&gt;. This could really work because we have the data organized by each date. Another one is the &lt;a href=&quot;https://www.d3-graph-gallery.com/arc.html&quot;&gt;arc diagram&lt;/a&gt; which could show the relationship of how frequently were texts sent at simultaneous times between two different conversations; that is simply put, how frequent or on what days did I text two different persons at the same time?&lt;/p&gt;

&lt;p&gt;But for now, I’ll just go ahead with a simple bar graph. Now there is no filtering by years or month, but this can be easily added with vanilla JavaScript; so now I have a huge bar graph that spans about 2544 pixels. I’ll just hardcode the filters for different months for now.&lt;/p&gt;

&lt;p&gt;So that’s what the graph looks like. One issue was the json being returned is not sorted by date. So when I just plug it in, it is just a bar graph with random dates on the x axis.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/msg_random.png&quot; alt=&quot;Messages Random&quot; /&gt;&lt;/p&gt;

&lt;p&gt;WhatsApp for some reason decided to use the format “D/M/YY” to tag each message with a timestamp. There are issues with this and these are so annoying and trivial that it is not worth mentioning.&lt;/p&gt;

&lt;p&gt;But luckily, moment.js came to the rescue. I have used moment.js before and I really like it. So, to sort this mess, I converted all the dates to a Unix timestamp value and then sorted the array. Now with this list of sorted dates, I can easily iterate over and convert them back to the original date format and use it as the key/property of the json object to retrive the number of messages on that specific day.&lt;/p&gt;

&lt;p&gt;This gives me a new array of objects with dates/messsages in order.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/msg_apr.png&quot; alt=&quot;Messages April&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I just hardcoded the filter for April 2019. So, 1277 is the highest number of messages sent and received to a single person on a single day. That’s my highest. Writing this program in Rust has proved that it is very performant and efficient.&lt;/p&gt;

&lt;p&gt;This could easily be a native app that runs in the desktop but GUI development in Rust is not yet mainstream yet, let alone making graphical charts with it. But I will expand upon this project and add new things as I keep learning about Rust and its philosophy. I have decided not to open source it for now because there are several things that needs more work and I still have to learn licensing.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Overall I’m proud of how my parser turned out. It was a fun project and I learned a little about my texting habits. Rust ended up being a good choice of implementation language and I like its expressive syntax.&lt;/p&gt;</content><author><name></name></author><summary type="html">I was learning Rust and its idea of being a systems programming language. Rust is a language that is focused on speed, efficiency and memory safety and comes without a garbage collector but ensures memory safety by providing checks and compile time guarantees.</summary></entry><entry><title type="html">Hello World!</title><link href="/code/2019/07/15/hello-world.html" rel="alternate" type="text/html" title="Hello World!" /><published>2019-07-15T21:25:00+09:30</published><updated>2019-07-15T21:25:00+09:30</updated><id>/code/2019/07/15/hello-world</id><content type="html" xml:base="/code/2019/07/15/hello-world.html">&lt;p&gt;Hi there. Welcome to my website. I just setup this site and I think I do not have to worry about security updates which is nice. I occasionally like to write about Music, Tech, Video Games and some thoughts.&lt;/p&gt;

&lt;p&gt;At this moment, I’m exactly at the midway point. I have completed 3 semesters and there are 3 more to go. Meanwhile I’ve been enjoying my vacation working on some side projects and going camping, hiking and ice skating with friends.&lt;/p&gt;</content><author><name></name></author><summary type="html">Hi there. Welcome to my website. I just setup this site and I think I do not have to worry about security updates which is nice. I occasionally like to write about Music, Tech, Video Games and some thoughts.</summary></entry></feed>